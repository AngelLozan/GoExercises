package main

import (
	"encoding/csv"
	"log"
	"os"
	// "strconv"
)

type Status struct {
	Name     string
	Entity   string
	Category string
}

func main() {
	records := []Status{
		{
			"CREATED",
			"ORDER",
			"BOOKING",
		},
		{
			"BOOKED",
			"ORDER",
			"BOOKING",
		},
		{
			"PENDING",
			"ORDER",
			"BOOKING",
		},
		{
			"PENDING_FRAUD_CHECK",
			"ORDER",
			"BOOKING",
		},
		{
			"ESCALATED",
			"ORDER",
			"BOOKING",
		},
		{
			"ORDER_PROCESSING",
			"ORDER",
			"BOOKING",
		},
		{
			"PICK_PACK",
			"ORDER",
			"FULFILMENT",
		},
		{
			"ORDER_SHIPPED",
			"ORDER",
			"DELIVERY",
		},
		{
			"CANCELLED",
			"ORDER",
			"DONE",
		},
		{
			"COMPLETE",
			"ORDER",
			"DONE",
		},
		{
			"ERROR",
			"ORDER",
			"DONE",
		},
		{
			"ACTION_REQUIRED",
			"ORDER",
			"BOOKING",
		},
		{
			"CREATED",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"AWAITING_WAVE",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"PENDING",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"SUBMITTED_TO_FL",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"WAITING_FOR_STOCK_AT_FL",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"CARRIER_ALLOCATION_PENDING",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"ASSIGNED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"RECEIVED_BY_FL",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"PICKED_PACKED_BY_FL",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"REJECTED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"FULFILLED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"PARTIALLY_FULFILLED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"REJECTION_PENDING",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"PARTIAL_REJECTED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"ACTION_REQUIRED",
			"FULFILMENT",
			"FULFILMENT",
		},
		{
			"AWAITING_COURIER_COLLECTION",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"READY_TO_DISPATCH",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"DISPATCHED",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"PICKED_UP",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"IN_TRANSIT",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"DELAY_DELIVERY",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"CUSTOM_CLEARANCE",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"ISSUE_IN_DELIVERY",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"WAITING_FOR_STOCK",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"SCHEDULED",
			"FULFILMENT",
			"BOOKING",
		},
		{
			"ESCALATED",
			"FULFILMENT",
			"DONE",
		},
		{
			"EXPIRED",
			"FULFILMENT",
			"DONE",
		},
		{
			"CANCELLED",
			"FULFILMENT",
			"DONE",
		},
		{
			"COMPLETE",
			"FULFILMENT",
			"DONE",
		},
		{
			"INACTIVE",
			"FULFILMENT",
			"DONE",
		},
		{
			"CREATED",
			"ARTICLE",
			"BOOKING",
		},
		{
			"CANCELLED",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"PENDING_CONSIGNMENT",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"SUBMITTED_TO_FL",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"WAITING_FOR_STOCK_AT_FL",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"RECEIVED_BY_FL",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"PICKED_PACKED_BY_FL",
			"ARTICLE",
			"FULFILMENT",
		},
		{
			"MISSING_TRACKING_DATA",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"COURIER_COLLECTION",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"READY_TO_DISPATCH",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"AWAITING_COURIER",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"IN_TRANSIT",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"DELAY_DELIVERY",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"CUSTOM_CLEARANCE",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"PICK_UP_FAILED",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"ISSUE_IN_TRANSIT",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"ADDRESS_ISSUE_IN_DELIVERY",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"COLLECTED",
			"ARTICLE",
			"DONE",
		},
		{
			"DISPATCHED",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"PICKED_UP",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"DELIVERED",
			"ARTICLE",
			"DONE",
		},
		{
			"CREATED",
			"CONSIGNMENT",
			"BOOKING",
		},
		{
			"PROCESSING",
			"CONSIGNMENT",
			"FULFILMENT",
		},
		{
			"ACTIVE_LODGED",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"DISPATCHED",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"IN_TRANSIT",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"DELAY_DELIVERY",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"CUSTOM_CLEARANCE",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"PICK_UP_FAILED",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"ISSUE_IN_TRANSIT",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"ADDRESS_ISSUE_IN_DELIVERY",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"DELIVERED",
			"CONSIGNMENT",
			"DONE",
		},
		{
			"FAILED",
			"CONSIGNMENT",
			"DONE",
		},
		{
			"OUT_FOR_DELIVERY",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"OUT_FOR_DELIVERY",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"OUT_FOR_DELIVERY",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"RETURN_SENDER_PROGRESS",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"RETURN_SENDER_PROGRESS",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"RETURN_SENDER_PROGRESS",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"RETURN_SENDER_COMPLETE",
			"FULFILMENT",
			"DONE",
		},
		{
			"RETURN_SENDER_COMPLETE",
			"ARTICLE",
			"DONE",
		},
		{
			"RETURN_SENDER_COMPLETE",
			"CONSIGNMENT",
			"DONE",
		},
		{
			"DELIVERY_REJECTED",
			"FULFILMENT",
			"DELIVERY",
		},
		{
			"DELIVERY_REJECTED",
			"ARTICLE",
			"DELIVERY",
		},
		{
			"DELIVERY_REJECTED",
			"CONSIGNMENT",
			"DELIVERY",
		},
		{
			"FULFILMENT_FAILED",
			"FULFILMENT",
			"DONE",
		},
		{
			"SHIPMENT_DAMAGED_LOST",
			"ARTICLE",
			"DONE",
		},
		{
			"SHIPMENT_DAMAGED_LOST",
			"CONSIGNMENT",
			"DONE",
		},
		{
			"RETURN_CREATED",
			"ORDER",
			"DONE",
		},
		{
			"REJECTED_AT_FL",
			"ARTICLE",
			"DONE",
		},
		{
			"NEW_FULFILMENT_TRIGGERED",
			"ARTICLE",
			"DONE",
		},
		{
			"RETURN_COMPLETE",
			"ORDER",
			"DONE",
		},
		{
			"",
			"",
			"",
		},
	}
	file, err := os.Create("./records.csv")
	if err != nil {
		log.Fatalln("failed to open file", err)
	}
	defer file.Close()

	w := csv.NewWriter(file)
	defer w.Flush()

	// Write CSV header
	if err := w.Write([]string{"Order", "Fulfilment", "Article", "Consignment"}); err != nil {
		log.Fatalln("error writing CSV header", err)
	}

	// Mapping entities to their respective statuses
	entityStatusMap := make(map[string][]string)

	for _, record := range records {
		entityStatusMap[record.Entity] = append(entityStatusMap[record.Entity], record.Name, record.Category)
	}

	// Write each entity's statuses to the CSV file
	for _, entity := range []string{"ORDER", "FULFILMENT", "ARTICLE", "CONSIGNMENT"} {
		if err := w.Write(entityStatusMap[entity]); err != nil {
			log.Fatalln("error writing entity statuses to file", err)
		}
	}
}
